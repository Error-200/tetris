{"version":3,"sources":["assets/mus/tetris.mp3","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/StartButton.js","components/Player.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js","assets/img/bg.png"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","console","log","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Player","url","Audio","audio","playing","setPlaying","play","pause","addEventListener","removeEventListener","useAudio","toggle","class","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","tetrisMus","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68deca57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tetris.e3edf624.mp3\";","//setting width and height of cell\nexport const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']));\n\n\n  //check collision algo\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that we're on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // 2. Check that our move is inside the game areas height (y)\n          // That we're not go through bottom of the play area\n          !stage[y + player.pos.y + moveY] ||\n          // 3. Check that our move is inside the game areas width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // 4. Check that the cell wer'e moving to isn't set to clear\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n","import styled from 'styled-components';\n// BG Image\nimport bgImage from '../../assets/img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`;\n","//creating tetrominos\nexport const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0' },\n  I: {\n    shape: [\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0]\n    ],\n    color: '80, 227, 230',\n  },\n  J: { shape: [\n    [0, 'J', 0],\n    [0, 'J', 0],\n    ['J', 'J', 0]\n  ],\n    color: '36, 95, 223'\n  },\n  L: {\n    shape: [[0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L']\n          ],\n    color: '223, 173, 36',\n  },\n  O: { shape: [\n           ['O', 'O'],\n            ['O', 'O']\n  ], color: '223, 217, 36'\n},\n  S: { shape:\n    [[0, 'S', 'S'],\n    ['S', 'S', 0],\n    [0, 0, 0]],\n     color: '48, 211, 56' },\n  T: {\n    shape: [\n      [0, 0, 0],\n      ['T', 'T', 'T'],\n      [0, 'T', 0]\n    ],\n    color: '132, 61, 198',\n  },\n  Z: { shape: [\n    ['Z', 'Z', 0],\n    [0, 'Z', 'Z'],\n    [0, 0, 0]],\n    color: '227, 78, 78' },\n};\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randTetromino =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randTetromino];\n};\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage, rowsCleared];\n};\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(25vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  /* border-radius: 5px; */\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n`;\n","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\n// React.memo makes sure we only re-render the changed cells\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color}>\n    {console.log('rerender cell')}\n  </StyledCell>\n);\n\nexport default React.memo(Cell);\n","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n\n    {stage.map(row => row.map((cell, x) => \n      <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;\n","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n\n\n);\n\nexport default Display;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledStartButton = styled.button`\n  box-sizing: border-box;\n\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n);\n\nexport default StartButton;\n","import React, { useState, useEffect } from \"react\";\n\nconst useAudio = url => {\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n\n  const toggle = () => setPlaying(!playing);\n\n  useEffect(() => {\n      playing ? audio.play() : audio.pause();\n    },\n    [playing]\n  );\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, []);\n\n  return [playing, toggle];\n};\n\nconst Player = ({ url }) => {\n  const [playing, toggle] = useAudio(url);\n\n  return (\n    <div>\n      <button onClick={toggle}>{playing ?\n         <i class=\"fa fa-volume-up\" /> :\n         <i class=\"fa fa-volume-off\" />}</button>\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Custom Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport Player from './Player';\n\nimport tetrisMus from '../assets/mus/tetris.mp3';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n  console.log('re-render');\n\n// moving tetris right and left\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n// when you speedup tetris movement\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1));\n      }\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      // Also increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n       updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n    setDropTime(null);\n    drop();\n  };\n\n  // This one starts the game\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      //left arrow\n      if (keyCode === 37) {\n        movePlayer(-1);\n      //right arrow\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      //down arrow\n      } else if (keyCode === 40) {\n        dropPlayer();\n        //to rotate tetris clockwise\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={e => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n          <Player\n                url={\n                  tetrisMus\n\n                }\n              />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  //rotate tetromino logic\n  //just copied to understrand see readme refrence \n\n   function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\n    // Reverse each row to get a rotaded matrix\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  }\n\n  //position update in both direction logic\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    // increase  score\n    if (rowsCleared > 0) {\n\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n\n\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}